name: cimacos
on:
  pull_request:
  release:
    types: [published]
  push:
    # tags:
    # branches:
    #   - main
    #   - develop


env:
  # Conan cache environment variables
  CONAN_SYSREQUIRES_MODE: enabled
  CONAN_USER_HOME: "${{ github.workspace }}/conan-cache"
  CONAN_USER_HOME_SHORT: "${{ github.workspace }}/conan-cache/short"

jobs:
  Test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-22.04
          - macos-12
          - windows-2022
        compiler:
          # you can specify the version after `-` like "llvm-13.0.0".
          - llvm
          - gcc
          - msvc
        build_type:
          - Release
          - Debug
        log-level:
          - "DEBUG"

        exclude:
          - os: ubuntu-22.04
            compiler: msvc
          - os: macos-12
            compiler: gcc
          - os: macos-12
            compiler: msvc
          - os: windows-2022
            compiler: gcc
          - os: windows-2022
            compiler: llvm

        include:
          # Add appropriate variables for gcov version required. This will intentionally break
          # if you try to use a compiler that does not have gcov set
          - compiler: gcc
            gcov_executable: gcov
          - compiler: llvm
            gcov_executable: "llvm-cov gcov"

          - os: ubuntu-22.04
            compiler: gcc
            build_type: Release
            log-level: "OFF"

    steps:
      - name: Check for llvm version mismatches
        if: ${{ contains(matrix.compiler, 'llvm') && !contains(matrix.compiler, env.CLANG_TIDY_VERSION) }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('There is a mismatch between configured llvm compiler and clang-tidy version chosen')
      - uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Cache
        uses: ./.github/actions/setup_cache
        with:
          compiler: ${{ matrix.compiler }}
          build_type: ${{ matrix.build_type }}

      - name: Setup Cpp
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          vcvarsall: ${{ contains(matrix.os, 'windows' )}}

          cmake: true
          brew: true
          conan: true
          ccache: true
          clangtidy: true

          doxygen: true

          gcovr: true

      - name: Setup MacOS
        if: runner.os == 'macOS'
        run: |
          brew install glfw
      - name: Setup Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt install -y libglfw3-dev libglfw3

      - name: Cleanup Conan system packages (they are not properly cached)
        run: |
          conan remove -f '*/system'
        # make sure coverage is only enabled for Debug builds, since it sets -O0 to make sure coverage
        # has meaningful results
      - name: Configure CMake
        run: |
          cmake -S . -B ./build -DCMAKE_BUILD_TYPE:STRING=${{matrix.build_type}} -DENABLE_MAIN=TRUE -DENABLE_TESTING=TRUE -DENABLE_COVERAGE:BOOL=${{ matrix.build_type == 'Debug' }} -DENABLE_DOXYGEN=OFF -DLOG_LEVEL:STRING=${{matrix.log-level}} -DWARNINGS_AS_ERRORS:BOOL=${{ !contains(matrix.os, 'windows' )}} -DENABLE_CPPCHECK=OFF -DENABLE_CLANG_TIDY=OFF -DENABLE_INCLUDE_WHAT_YOU_USE=OFF
      - name: Build
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: |
          cmake --build ./build --config ${{matrix.build_type}}
      - name: Test
        working-directory: ./build
        run: |
          ctest -C ${{matrix.build_type}} --output-on-failure
      - name: Coverage
        if: runner.os != 'Windows' && matrix.build_type == 'Debug'
        run: |
          mkdir -p build/coverage
          gcovr --config doc/coverage/gcovr.cfg --gcov-executable '${{ matrix.gcov_executable }}'

      - name: Publish to codecov
        uses: codecov/codecov-action@v3
        with:
          flags: ${{ runner.os }}
          name: ${{ runner.os }}-coverage
          files: ./build/cobertura.xml