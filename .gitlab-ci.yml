stages:
  - prepare
  - checks
  - build
  - test
  - analyze
  - deploy

variables:
  GIT_SUBMODULE_STRATEGY: recursive
  WARNINGS_AS_ERRORS: "ON"
  ENABLE_MAIN: "OFF"
  ENABLE_TESTING: "OFF"
  TOOLCHAIN_PATH: "build/$BUILD_TYPE"

image: ins-cpp:10

.clang:
  variables:
    CC: clang
    CXX: clang++

.gcc:
  variables:
    CC: gcc
    CXX: g++

.release:
  variables:
    BUILD_TYPE: Release

.debug:
  variables:
    BUILD_TYPE: Debug

.log-data:
  variables:
    LOG_LEVEL_INSTINCT: DATA

.log-trace:
  variables:
    LOG_LEVEL_INSTINCT: TRACE

.log-debug:
  variables:
    LOG_LEVEL_INSTINCT: DEBUG

.log-info:
  variables:
    LOG_LEVEL_INSTINCT: INFO

.log-off:
  variables:
    LOG_LEVEL_INSTINCT: "OFF"

.schedule:
  only:
    - schedules

.branch-github:
  only:
    - github-develop
    - github-main

.retry:
  retry:
    max: 2
    when:
      - stuck_or_timeout_failure
      - job_execution_timeout

.windows:
  tags:
    - windows
  before_script:
    # - 'call "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat"'
    # https://gist.github.com/FeodorFitsner/b34162690ae2838409b7459824d51ed7
    - cmd.exe /c "call `"C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat`" && set > %temp%\vcvars-$CI_CONCURRENT_ID.txt"
    - Get-Content "$env:temp\vcvars-$CI_CONCURRENT_ID.txt" | Foreach-Object { if ($_ -match "^(.*?)=(.*)$") { Set-Content "env:\$($matches[1])" $matches[2] } }
    - conan profile detect --force
  variables:
    GIT_CLONE_PATH: '$CI_BUILDS_DIR/$CI_PROJECT_NAME/$CI_COMMIT_SHA/$CI_JOB_ID'
    WARNINGS_AS_ERRORS: "OFF"
    TOOLCHAIN_PATH: "build"

.linux:
  tags:
    - linux

.raspberry:
  tags:
    - armv8

.macOS:
  tags:
    - macOS
  variables:
    GIT_CLONE_PATH: '$CI_BUILDS_DIR/$CI_PROJECT_NAME/$CI_COMMIT_SHA/$CI_JOB_ID'

# ╔══════════════════════════════════════════════════════════════════════════════════════════════════╗
# ║                                              Prepare                                             ║
# ╚══════════════════════════════════════════════════════════════════════════════════════════════════╝

check-image:
  stage: prepare
  extends: .linux
  script:
    - uname -a
    - cat /etc/issue
    - g++ --version
    - clang++ --version
    - clang-tidy --version
    - clang-format --version
    - cmake --version
    - conan --version
    - conan profile show
    - doxygen --version
    - cppcheck --version
    - gcovr --version
    - gcov --version
    - xml_grep --version
    - dvips --version
    - gs --version
    - latex --version
    - command -v pdf2svg

check-raspberry:
  stage: prepare
  extends: .raspberry
  script:
    - g++ --version
    - clang++ --version
    - cmake --version
    - conan --version
    - xml_grep --version

check-macOS:
  stage: prepare
  extends: .macOS
  script:
    - clang++ --version
    - cmake --version
    - conan --version

check-windows:
  stage: prepare
  extends: .windows
  script:
    - cl.exe
    - cmake --version
    - conan --version

# ╔══════════════════════════════════════════════════════════════════════════════════════════════════╗
# ║                                              Checks                                              ║
# ╚══════════════════════════════════════════════════════════════════════════════════════════════════╝

clang-tidy:
  stage: checks
  needs: ["check-image"]
  extends:
    - .linux
    - .clang
  script:
    - conan profile detect --force
    - conan install . --build=missing -s build_type=Release -s compiler.cppstd=17
    - cmake -Bbuild/Release -S. -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE="build/Release/generators/conan_toolchain.cmake" -DENABLE_MAIN=ON -DENABLE_TESTING=OFF -DENABLE_DOXYGEN=OFF -DLOG_LEVEL=DATA -DWARNINGS_AS_ERRORS=ON -DENABLE_CPPCHECK=OFF -DENABLE_CLANG_TIDY=ON -DENABLE_INCLUDE_WHAT_YOU_USE=OFF
    - cmake --build build/Release --target copy-compile-commands
    - python3 ./tools/run-clang-tidy.py $PWD/src

clang-tidy:tests:
  stage: checks
  needs: ["check-image"]
  extends:
    - .linux
    - .clang
  script:
    - conan profile detect --force
    - conan install . --build=missing -s build_type=Release -s compiler.cppstd=17
    - cmake -Bbuild/Release -S. -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE="build/Release/generators/conan_toolchain.cmake" -DENABLE_MAIN=OFF -DENABLE_TESTING=ON -DCATCH2_JUNIT_OUTPUT=ON -DENABLE_DOXYGEN=OFF -DLOG_LEVEL=DATA -DWARNINGS_AS_ERRORS=ON -DENABLE_CPPCHECK=OFF -DENABLE_CLANG_TIDY=ON -DENABLE_INCLUDE_WHAT_YOU_USE=OFF
    - cmake --build build/Release --target copy-compile-commands
    - python3 ./tools/run-clang-tidy.py $PWD/test

clang-format:
  stage: checks
  needs: ["check-image"]
  extends:
    - .linux
    - .clang
  script:
    - find src test -regex '.*\.[ch]pp$' -exec sh -c 'for n; do clang-format --Werror --dry-run "$n" || retVal=1; done; exit $retVal' sh {} +

documentation:
  stage: checks
  needs: ["check-image"]
  extends:
    - .linux
  script:
    - conan profile detect --force
    - conan install . --build=missing -s build_type=Release -s compiler.cppstd=17
    - cmake -Bbuild/Release -S. -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE="build/Release/generators/conan_toolchain.cmake" -DENABLE_MAIN=OFF -DENABLE_TESTING=OFF -DENABLE_DOXYGEN=ON -DLOG_LEVEL=OFF -DENABLE_CLANG_TIDY=OFF -DENABLE_CPPCHECK=OFF -DENABLE_INCLUDE_WHAT_YOU_USE=OFF -DDOC_CHECK_CODE_DOCUMENTATION=YES
    - cmake --build build/Release --target doc
  artifacts:
    when: on_failure
    paths:
      - build/doc/
    expire_in: 1 week

# ╔══════════════════════════════════════════════════════════════════════════════════════════════════╗
# ║                                         Build Main & GUI                                         ║
# ╚══════════════════════════════════════════════════════════════════════════════════════════════════╝

.build:
  stage: build
  script:
    - echo "$CC"
    - echo "$CXX"
    - echo "$BUILD_TYPE"
    - echo "$ENABLE_MAIN"
    - echo "$ENABLE_TESTING"
    - echo "$LOG_LEVEL_INSTINCT"
    - echo "$WARNINGS_AS_ERRORS"
    - echo "$CMAKE_BUILD_PARALLEL_LEVEL"
    - conan profile detect --force
    - conan install . --build=missing -s build_type="$BUILD_TYPE" -s compiler.cppstd=17
    - cmake -B"build/$BUILD_TYPE" -S. -DCMAKE_BUILD_TYPE="$BUILD_TYPE" -DCMAKE_TOOLCHAIN_FILE="$TOOLCHAIN_PATH/generators/conan_toolchain.cmake" -DENABLE_MAIN="$ENABLE_MAIN" -DENABLE_TESTING="$ENABLE_TESTING" -DCATCH2_JUNIT_OUTPUT="$ENABLE_TESTING" -DENABLE_COVERAGE="NO" -DENABLE_DOXYGEN=OFF -DLOG_LEVEL="$LOG_LEVEL_INSTINCT" -DWARNINGS_AS_ERRORS="$WARNINGS_AS_ERRORS" -DENABLE_CPPCHECK=OFF -DENABLE_CLANG_TIDY=OFF -DENABLE_INCLUDE_WHAT_YOU_USE=OFF
    - cmake --build "build/$BUILD_TYPE" --config $BUILD_TYPE

.build:linux:
  extends: .linux
  needs: ["check-image"]

.build:windows:
  extends: .windows
  needs: ["check-windows"]

.build:raspberry:
  extends: .raspberry
  needs: ["check-raspberry"]

.build:macOS:
  extends: .macOS
  needs: ["check-macOS"]

.build:main:
  variables:
    ENABLE_MAIN: "ON"
  artifacts:
    paths:
      - build/bin/$BUILD_TYPE/*
    exclude:
      - build/bin/$BUILD_TYPE/*.pdb
    expire_in: 2h

.build:tests:
  variables:
    ENABLE_TESTING: "ON"

.build:test-artifacts:
  artifacts:
    paths:
      - build/$BUILD_TYPE/CTestTestfile.cmake
      - build/$BUILD_TYPE/test/CTestTestfile.cmake
      - build/$BUILD_TYPE/test/tests_*.cmake
      - build/$BUILD_TYPE/test/tests-*.cmake
      - build/bin/$BUILD_TYPE/*
    expire_in: 2h

main:win:
  extends:
    - .build
    - .build:main
    - .build:windows
    - .release
    - .log-debug

main:clang:
  extends:
    - .build
    - .build:main
    - .build:linux
    - .clang
    - .release
    - .log-debug

main:gcc:
  extends:
    - .build
    - .build:main
    - .build:linux
    - .gcc
    - .release
    - .log-debug

raspberry:gcc:
  extends:
    - .build
    - .build:main
    - .build:tests
    - .build:raspberry
    - .build:test-artifacts
    - .gcc
    - .release
    - .log-trace
  variables:
    CMAKE_BUILD_PARALLEL_LEVEL: 2

main:macOS:
  extends:
    - .build
    - .build:main
    - .build:macOS
    - .release
    - .log-debug

# ╔══════════════════════════════════════════════════════════════════════════════════════════════════╗
# ║                                            Build Tests                                           ║
# ╚══════════════════════════════════════════════════════════════════════════════════════════════════╝

tests:clang:
  extends:
    - .build
    - .build:tests
    - .build:linux
    - .build:test-artifacts
    - .clang
    - .release
    - .log-trace

tests:clang:LOG_DATA:
  extends:
    - .build
    - .build:tests
    - .build:linux
    - .build:test-artifacts
    - .clang
    - .release
    - .log-data

tests:gcc:LOG_DATA:
  extends:
    - .build
    - .build:tests
    - .build:linux
    - .gcc
    - .release
    - .log-data

tests:gcc:LOG_OFF:
  extends:
    - .build
    - .build:tests
    - .build:linux
    - .gcc
    - .release
    - .log-off

tests:win:
  extends:
    - .build
    - .build:tests
    - .build:windows
    - .build:test-artifacts
    - .release
    - .log-trace
  allow_failure: true

tests:macOS:
  extends:
    - .build
    - .build:tests
    - .build:macOS
    - .build:test-artifacts
    - .release
    - .log-trace

# ╔══════════════════════════════════════════════════════════════════════════════════════════════════╗
# ║                                               Test                                               ║
# ╚══════════════════════════════════════════════════════════════════════════════════════════════════╝

.run-tests:
  stage: test
  extends:
    - .retry
  script:
    - cd build/$BUILD_TYPE
    - ctest --output-on-failure # -j2
  artifacts:
    when: on_failure
    paths:
      - test/logs/
    name: 'test-logs'


.junit:
  after_script:
    - cd build/$BUILD_TYPE/test
    - xml_grep --pretty_print indented --wrap '' --descr '' --cond "testsuites" *.xml > ../../../junit.xml
    - sed -i ':begin;$!N;s/<\/testsuites>\n<testsuites>//;tbegin;P;D' ../../../junit.xml
  artifacts:
    when: always
    reports:
      junit: junit.xml
    expire_in: 2h


run-tests:clang:
  needs: ["tests:clang"]
  extends:
    - .run-tests
    - .linux
    - .release
    - .junit

run-tests:clang:LOG_DATA:
  needs: ["tests:clang:LOG_DATA"]
  extends:
    - .run-tests
    - .linux
    - .release
    - .junit

run-tests:win:
  needs: ["tests:win"]
  extends:
    - .run-tests
    - .windows
    - .release
  script:
    - Get-ChildItem -Path .\build\ -Recurse -Filter *.cmake | ForEach-Object { (Get-Content $_.FullName) `
          -replace "$CI_COMMIT_SHA/\d+", "$CI_COMMIT_SHA/$CI_JOB_ID" |
          Out-File -encoding ASCII $_.FullName }
    - cd build/$BUILD_TYPE
    - ctest --output-on-failure
  allow_failure: true

run-tests:raspberry:gcc:
  needs: ["raspberry:gcc"]
  extends:
    - .run-tests
    - .raspberry
    - .release

run-tests:macOS:
  needs: ["tests:macOS"]
  extends:
    - .run-tests
    - .macOS
    - .release
  before_script:
    - find ./build -name '*.cmake' -exec gsed -i -E "s,$CI_COMMIT_SHA/[0-9]+,$CI_COMMIT_SHA/$CI_JOB_ID,g" {} \;

# ╔══════════════════════════════════════════════════════════════════════════════════════════════════╗
# ║                                             Analyze                                              ║
# ╚══════════════════════════════════════════════════════════════════════════════════════════════════╝

doxygen:
  stage: analyze
  needs: ["check-image"]
  extends:
    - .linux
  script:
    - conan profile detect --force
    - conan install . --build=missing -s build_type=Release -s compiler.cppstd=17
    - cmake -Bbuild/Release -S. -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE="build/Release/generators/conan_toolchain.cmake" -DENABLE_MAIN=OFF -DENABLE_TESTING=OFF -DENABLE_DOXYGEN=ON -DWARNINGS_AS_ERRORS=OFF -DENABLE_CPPCHECK=OFF -DENABLE_CLANG_TIDY=OFF -DENABLE_INCLUDE_WHAT_YOU_USE=OFF
    - cmake --build build/Release --target doc
  artifacts:
    paths:
      - build/doc/html/
    expire_in: 2h
  only:
    - main

coverage:
  stage: analyze
  needs: ["check-image"]
  extends:
    - .build:tests
    - .build:linux
    - .gcc
    - .debug
    - .log-trace
  script:
    - echo "$CC"
    - echo "$CXX"
    - echo "$BUILD_TYPE"
    - echo "$ENABLE_MAIN"
    - echo "$ENABLE_TESTING"
    - echo "$LOG_LEVEL_INSTINCT"
    - echo "$WARNINGS_AS_ERRORS"
    - echo "$CMAKE_BUILD_PARALLEL_LEVEL"
    - conan profile detect --force
    - conan install . --build=missing -s build_type="$BUILD_TYPE" -s compiler.cppstd=17
    - cmake -B"build/$BUILD_TYPE" -S. -DCMAKE_BUILD_TYPE="$BUILD_TYPE" -DCMAKE_TOOLCHAIN_FILE="$TOOLCHAIN_PATH/generators/conan_toolchain.cmake" -DENABLE_MAIN="$ENABLE_MAIN" -DENABLE_TESTING="$ENABLE_TESTING" -DCATCH2_JUNIT_OUTPUT="$ENABLE_TESTING" -DENABLE_COVERAGE="YES" -DENABLE_DOXYGEN=OFF -DLOG_LEVEL="$LOG_LEVEL_INSTINCT" -DWARNINGS_AS_ERRORS="$WARNINGS_AS_ERRORS" -DENABLE_CPPCHECK=OFF -DENABLE_CLANG_TIDY=OFF -DENABLE_INCLUDE_WHAT_YOU_USE=OFF
    - cmake --build "build/$BUILD_TYPE" --config $BUILD_TYPE
    - cd build/$BUILD_TYPE
    - ctest --output-on-failure # -j2
    - cd ../..
    - mkdir -p build/coverage
    - gcovr --config doc/coverage/gcovr.cfg
  # coverage: '/Total:\| ?(\d+\.?\d+\%)/'
  coverage: /^\s*lines:\s*\d+.\d+\%/
  artifacts:
    paths:
      - build/coverage
    reports:
      coverage_report:
        coverage_format: cobertura
        path: build/cobertura.xml
    expire_in: 2h

# ╔══════════════════════════════════════════════════════════════════════════════════════════════════╗
# ║                                              Deploy                                              ║
# ╚══════════════════════════════════════════════════════════════════════════════════════════════════╝

pages:
  stage: deploy
  needs: ["doxygen", "coverage"]
  extends: .linux
  script:
    - mv build/doc/html/ public/
    - mv build/coverage/ public/coverage/
  artifacts:
    name: "Documentation & Coverage Report"
    paths:
      - public
    expire_in: 2h
  only:
    - main
  # except:
  #   - /^(?!main).+@/

# ╔══════════════════════════════════════════════════════════════════════════════════════════════════╗
# ║                                           Ubuntu 22.04                                           ║
# ╚══════════════════════════════════════════════════════════════════════════════════════════════════╝

.build:ubuntu:22.04:
  stage: build
  needs: []
  extends:
    - .build
    - .build:main
    - .build:tests
    - .build:test-artifacts
    - .linux
    - .schedule
    - .branch-github
    - .retry
    - .log-trace
  image: ubuntu:22.04
  variables:
    DEBIAN_FRONTEND: noninteractive
    TZ: Europe/Berlin
  before_script:
    - apt update
    - apt upgrade -y
    - apt install -y build-essential clang clang-tidy cmake python3-pip ccache cppcheck libglfw3-dev libglfw3 libtbb-dev libatlas-base-dev libsuitesparse-dev
    - pip3 install conan
    - conan profile detect --force
    - g++ --version
    - clang++ --version
    - clang-tidy --version
    - cmake --version
    - conan --version
    - conan profile show
    - cppcheck --version

ubuntu:22.04:clang:release:
  extends:
    - .build:ubuntu:22.04
    - .clang
    - .release

ubuntu:22.04:clang:debug:
  extends:
    - .build:ubuntu:22.04
    - .clang
    - .debug

ubuntu:22.04:gcc:release:
  extends:
    - .build:ubuntu:22.04
    - .gcc
    - .release

ubuntu:22.04:gcc:debug:
  extends:
    - .build:ubuntu:22.04
    - .gcc
    - .debug

.run-tests:ubuntu:22.04:
  stage: test
  extends:
    - .run-tests
    - .linux
    - .schedule
    - .branch-github
  image: ubuntu:22.04
  variables:
    DEBIAN_FRONTEND: noninteractive
    TZ: Europe/Berlin
  before_script:
    - apt update
    - apt install -y cmake libglfw3
    - cmake --version

run-tests:ubuntu:22.04:clang:release:
  needs: ["ubuntu:22.04:clang:release"]
  extends:
    - .run-tests:ubuntu:22.04
    - .release

run-tests:ubuntu:22.04:clang:debug:
  needs: ["ubuntu:22.04:clang:debug"]
  extends:
    - .run-tests:ubuntu:22.04
    - .debug

run-tests:ubuntu:22.04:gcc:release:
  needs: ["ubuntu:22.04:gcc:release"]
  extends:
    - .run-tests:ubuntu:22.04
    - .release

run-tests:ubuntu:22.04:gcc:debug:
  needs: ["ubuntu:22.04:gcc:debug"]
  extends:
    - .run-tests:ubuntu:22.04
    - .debug