stages:
  - prepare
  - checks
  - build
  - test
  - analyze
  - deploy

variables:
  GIT_SUBMODULE_STRATEGY: recursive

image: ins-cpp:10

.clang:
  variables:
    CC: clang
    CXX: clang++

.gcc:
  variables:
    CC: gcc
    CXX: g++

.release:
  variables:
    BUILD_TYPE: Release

.debug:
  variables:
    BUILD_TYPE: Debug

.schedule:
  only:
    - schedules

.retry:
  retry:
    max: 2
    when:
      - stuck_or_timeout_failure
      - job_execution_timeout

.windows:
  tags:
    - windows
  before_script:
    - 'call "C:\Program Files (x86)\Microsoft Visual Studio\2022\BuildTools\VC\Auxiliary\Build\vcvars64.bat"'

.linux:
  tags:
    - linux

.raspberry:
  tags:
    - armv8

# ╔══════════════════════════════════════════════════════════════════════════════════════════════════╗
# ║                                              Prepare                                             ║
# ╚══════════════════════════════════════════════════════════════════════════════════════════════════╝

check-image:
  stage: prepare
  extends: .linux
  script:
    - uname -a
    - cat /etc/issue
    - g++ --version
    - clang++ --version
    - clang-tidy --version
    - cmake --version
    - conan --version
    - doxygen --version
    - cppcheck --version
    - lcov --version
    - genhtml --version
    - gcov --version
    - xml_grep --version
    - dvips --version
    - gs --version
    - latex --version
    - command -v pdf2svg

check-raspberry:
  stage: prepare
  extends: .raspberry
  script:
    - g++ --version
    - clang++ --version
    - cmake --version
    - conan --version
    - xml_grep --version

check-windows:
  stage: prepare
  extends: .windows
  script:
    - cl.exe
    - cmake --version
    - conan --version

# ╔══════════════════════════════════════════════════════════════════════════════════════════════════╗
# ║                                              Checks                                              ║
# ╚══════════════════════════════════════════════════════════════════════════════════════════════════╝

clang-tidy:
  stage: checks
  needs: ["check-image"]
  extends:
    - .linux
    - .clang
  script:
    - cmake -Bbuild/Release -S. -DCMAKE_BUILD_TYPE=Release -DENABLE_MAIN=ON -DENABLE_TESTING=OFF -DENABLE_DOXYGEN=OFF -DLOG_LEVEL=DATA -DWARNINGS_AS_ERRORS=ON -DENABLE_CPPCHECK=OFF -DENABLE_CLANG_TIDY=ON -DENABLE_INCLUDE_WHAT_YOU_USE=OFF
    - cmake --build build/Release --target copy-compile-commands
    - python3 ./tools/run-clang-tidy.py $PWD/src

clang-tidy:tests:
  stage: checks
  needs: ["check-image"]
  extends:
    - .linux
    - .clang
  script:
    - cmake -Bbuild/Release -S. -DCMAKE_BUILD_TYPE=Release -DENABLE_MAIN=OFF -DENABLE_TESTING=ON -DCATCH2_JUNIT_OUTPUT=ON -DENABLE_DOXYGEN=OFF -DLOG_LEVEL=DATA -DWARNINGS_AS_ERRORS=ON -DENABLE_CPPCHECK=OFF -DENABLE_CLANG_TIDY=ON -DENABLE_INCLUDE_WHAT_YOU_USE=OFF
    - cmake --build build/Release --target copy-compile-commands
    - python3 ./tools/run-clang-tidy.py $PWD/test

documentation:
  stage: checks
  needs: ["check-image"]
  extends:
    - .linux
  script:
    - cmake -Bbuild/Release -S. -DCMAKE_BUILD_TYPE=Release -DENABLE_MAIN=OFF -DENABLE_TESTING=OFF -DENABLE_DOXYGEN=ON -DLOG_LEVEL=OFF -DENABLE_CLANG_TIDY=OFF -DENABLE_CPPCHECK=OFF -DENABLE_INCLUDE_WHAT_YOU_USE=OFF -DDOC_CHECK_CODE_DOCUMENTATION=YES
    - cmake --build build/Release --target doc
  artifacts:
    when: on_failure
    paths:
      - bin/doc/
    expire_in: 1 week

# ╔══════════════════════════════════════════════════════════════════════════════════════════════════╗
# ║                                         Build Main & GUI                                         ║
# ╚══════════════════════════════════════════════════════════════════════════════════════════════════╝

main:win:
  stage: build
  extends:
    - .windows
  needs: ["check-windows"]
  script:
    - cmake -Bbuild/Release -S. -DCMAKE_BUILD_TYPE=Release -DENABLE_MAIN=ON -DENABLE_TESTING=OFF -DENABLE_DOXYGEN=OFF -DLOG_LEVEL=TRACE -DWARNINGS_AS_ERRORS=OFF -DENABLE_CPPCHECK=OFF -DENABLE_CLANG_TIDY=OFF -DENABLE_INCLUDE_WHAT_YOU_USE=OFF
    - cmake --build build/Release -- -maxCpuCount

main:win:LOG_OFF:
  extends:
    - main:win
  script:
    - cmake -Bbuild/Release -S. -DCMAKE_BUILD_TYPE=Release -DENABLE_MAIN=ON -DENABLE_TESTING=OFF -DENABLE_DOXYGEN=OFF -DLOG_LEVEL=OFF -DWARNINGS_AS_ERRORS=OFF -DENABLE_CPPCHECK=OFF -DENABLE_CLANG_TIDY=OFF -DENABLE_INCLUDE_WHAT_YOU_USE=OFF
    - cmake --build build/Release -- -maxCpuCount

main:win:LOG_INFO:
  extends:
    - main:win
  script:
    - cmake -Bbuild/Release -S. -DCMAKE_BUILD_TYPE=Release -DENABLE_MAIN=ON -DENABLE_TESTING=OFF -DENABLE_DOXYGEN=OFF -DLOG_LEVEL=INFO -DWARNINGS_AS_ERRORS=OFF -DENABLE_CPPCHECK=OFF -DENABLE_CLANG_TIDY=OFF -DENABLE_INCLUDE_WHAT_YOU_USE=OFF
    - cmake --build build/Release -- -maxCpuCount
    - move bin\Release\instinct.exe .
  artifacts:
    paths:
      - instinct.exe
    expire_in: 1 week
  only:
    - master

.build:main:
  stage: build
  extends: .linux
  needs: ["check-image"]
  script:
    - cmake -Bbuild/Release -S. -DCMAKE_BUILD_TYPE=Release -DENABLE_MAIN=ON -DENABLE_TESTING=OFF -DENABLE_DOXYGEN=OFF -DLOG_LEVEL=TRACE -DWARNINGS_AS_ERRORS=ON -DENABLE_CPPCHECK=OFF -DENABLE_CLANG_TIDY=OFF -DENABLE_INCLUDE_WHAT_YOU_USE=OFF
    - cmake --build build/Release -- -j2

main:clang:
  extends:
    - .build:main
    - .clang

main:gcc:
  extends:
    - .build:main
    - .gcc

.build:main:LOG_OFF:
  extends:
    - .build:main
  script:
    - cmake -Bbuild/Release -S. -DCMAKE_BUILD_TYPE=Release -DENABLE_MAIN=ON -DENABLE_TESTING=OFF -DENABLE_DOXYGEN=OFF -DLOG_LEVEL=OFF -DWARNINGS_AS_ERRORS=ON -DENABLE_CPPCHECK=OFF -DENABLE_CLANG_TIDY=OFF -DENABLE_INCLUDE_WHAT_YOU_USE=OFF
    - cmake --build build/Release -- -j2

main:clang:LOG_OFF:
  extends:
    - .build:main:LOG_OFF
    - .clang

main:gcc:LOG_OFF:
  extends:
    - .build:main:LOG_OFF
    - .gcc

.build:main:LOG_DATA:
  extends:
    - .build:main
  script:
    - cmake -Bbuild/Release -S. -DCMAKE_BUILD_TYPE=Release -DENABLE_MAIN=ON -DENABLE_TESTING=OFF -DENABLE_DOXYGEN=OFF -DLOG_LEVEL=DATA -DWARNINGS_AS_ERRORS=ON -DENABLE_CPPCHECK=OFF -DENABLE_CLANG_TIDY=OFF -DENABLE_INCLUDE_WHAT_YOU_USE=OFF
    - cmake --build build/Release -- -j2

main:clang:LOG_DATA:
  extends:
    - .build:main:LOG_DATA
    - .clang

main:gcc:LOG_DATA:
  extends:
    - .build:main:LOG_DATA
    - .gcc

.build:main:raspberry:
  stage: build
  extends: .raspberry
  needs: ["check-raspberry"]
  script:
    - cmake -Bbuild/Release -S. -DCMAKE_BUILD_TYPE=Release -DENABLE_MAIN=ON -DENABLE_TESTING=OFF -DENABLE_DOXYGEN=OFF -DLOG_LEVEL=DEBUG -DWARNINGS_AS_ERRORS=ON -DENABLE_CPPCHECK=OFF -DENABLE_CLANG_TIDY=OFF -DENABLE_INCLUDE_WHAT_YOU_USE=OFF
    - cmake --build build/Release -- -j2
    - mv bin/Release/instinct .

main:raspberry:clang:
  extends:
    - .build:main:raspberry
    - .clang

main:raspberry:gcc:
  extends:
    - .build:main:raspberry
    - .gcc
  artifacts:
    paths:
      - instinct
    expire_in: 2h

# ╔══════════════════════════════════════════════════════════════════════════════════════════════════╗
# ║                                            Build Tests                                           ║
# ╚══════════════════════════════════════════════════════════════════════════════════════════════════╝

.build:tests:
  stage: build
  extends: .linux
  needs: ["check-image"]
  script:
    - cmake -Bbuild/$BUILD_TYPE -S. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DENABLE_MAIN=OFF -DENABLE_TESTING=ON -DCATCH2_JUNIT_OUTPUT=ON -DENABLE_DOXYGEN=OFF -DENABLE_COVERAGE=TRUE -DLOG_LEVEL=TRACE -DWARNINGS_AS_ERRORS=ON -DENABLE_CPPCHECK=OFF -DENABLE_CLANG_TIDY=OFF -DENABLE_INCLUDE_WHAT_YOU_USE=OFF
    - cmake --build build/$BUILD_TYPE -- -j2

.build:tests:LOG_DATA:
  stage: build
  extends: .linux
  needs: ["check-image"]
  script:
    - cmake -Bbuild/$BUILD_TYPE -S. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DENABLE_MAIN=OFF -DENABLE_TESTING=ON -DCATCH2_JUNIT_OUTPUT=ON -DENABLE_DOXYGEN=OFF -DENABLE_COVERAGE=TRUE -DLOG_LEVEL=DATA -DWARNINGS_AS_ERRORS=ON -DENABLE_CPPCHECK=OFF -DENABLE_CLANG_TIDY=OFF -DENABLE_INCLUDE_WHAT_YOU_USE=OFF
    - cmake --build build/$BUILD_TYPE -- -j2

.build:tests-win:
  stage: build
  extends: .windows
  needs: ["check-windows"]

.build:test-artifacts:
  artifacts:
    paths:
      - build/$BUILD_TYPE/CTestTestfile.cmake
      - build/$BUILD_TYPE/test/CTestTestfile.cmake
      - build/$BUILD_TYPE/test/tests_*.cmake
      - bin/$BUILD_TYPE/tests*
    expire_in: 2h

tests:clang:
  extends:
    - .build:tests
    - .build:test-artifacts
    - .clang
    - .release

tests:gcc:
  extends:
    - .build:tests
    - .build:test-artifacts
    - .gcc
    - .release

tests:gcc:debug:
  extends:
    - .build:tests
    - .gcc
    - .debug
  artifacts:
    untracked: true # For the coverage report
    expire_in: 2h
  only:
    - master

tests:clang:LOG_DATA:
  extends:
    - .build:tests:LOG_DATA
    - .clang

tests:gcc:LOG_DATA:
  extends:
    - .build:tests:LOG_DATA
    - .gcc

.build:tests:LOG_OFF:
  extends:
    - .build:tests
  script:
    - cmake -Bbuild/$BUILD_TYPE -S. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DENABLE_MAIN=OFF -DENABLE_TESTING=ON -DCATCH2_JUNIT_OUTPUT=ON -DENABLE_DOXYGEN=OFF -DENABLE_COVERAGE=TRUE -DLOG_LEVEL=OFF -DWARNINGS_AS_ERRORS=ON -DENABLE_CPPCHECK=OFF -DENABLE_CLANG_TIDY=OFF -DENABLE_INCLUDE_WHAT_YOU_USE=OFF
    - cmake --build build/$BUILD_TYPE -- -j2

tests:clang:LOG_OFF:
  extends:
    - .build:tests:LOG_OFF
    - .clang
    - .release

tests:gcc:LOG_OFF:
  extends:
    - .build:tests:LOG_OFF
    - .gcc
    - .release

tests:win:
  extends:
    - .build:tests-win
    - .build:test-artifacts
  script:
    - cmake -Bbuild/Release -S. -DCMAKE_BUILD_TYPE=Release -DENABLE_MAIN=OFF -DENABLE_TESTING=ON -DCATCH2_JUNIT_OUTPUT=ON -DENABLE_DOXYGEN=OFF -DLOG_LEVEL=TRACE -DWARNINGS_AS_ERRORS=OFF -DENABLE_CPPCHECK=OFF -DENABLE_CLANG_TIDY=OFF -DENABLE_INCLUDE_WHAT_YOU_USE=OFF
    - cmake --build build/Release -- -maxCpuCount
  artifacts:
    paths:
      - build/Release/CTestTestfile.cmake
      - build/Release/test/CTestTestfile.cmake
      - build/Release/test/tests_*.cmake
      - bin/Release/tests*
    expire_in: 2h

tests:win:LOG_OFF:
  extends:
    - .build:tests-win
  script:
    - cmake -Bbuild/Release -S. -DCMAKE_BUILD_TYPE=Release -DENABLE_MAIN=OFF -DENABLE_TESTING=ON -DCATCH2_JUNIT_OUTPUT=ON -DENABLE_DOXYGEN=OFF -DLOG_LEVEL=OFF -DWARNINGS_AS_ERRORS=OFF -DENABLE_CPPCHECK=OFF -DENABLE_CLANG_TIDY=OFF -DENABLE_INCLUDE_WHAT_YOU_USE=OFF
    - cmake --build build/Release -- -maxCpuCount

.build:raspberry:tests:
  stage: build
  extends: .raspberry
  needs: ["check-raspberry"]
  script:
    - cmake -Bbuild/$BUILD_TYPE -S. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DENABLE_MAIN=OFF -DENABLE_TESTING=ON -DCATCH2_JUNIT_OUTPUT=ON -DENABLE_DOXYGEN=OFF -DLOG_LEVEL=TRACE -DWARNINGS_AS_ERRORS=ON -DENABLE_CPPCHECK=OFF -DENABLE_CLANG_TIDY=OFF -DENABLE_INCLUDE_WHAT_YOU_USE=OFF
    - cmake --build build/$BUILD_TYPE -- -j2

tests:raspberry:clang:
  extends:
    - .build:raspberry:tests
    - .build:test-artifacts
    - .clang
    - .release

tests:raspberry:gcc:
  extends:
    - .build:raspberry:tests
    - .build:test-artifacts
    - .gcc
    - .release

# ╔══════════════════════════════════════════════════════════════════════════════════════════════════╗
# ║                                               Test                                               ║
# ╚══════════════════════════════════════════════════════════════════════════════════════════════════╝

.run-tests:
  stage: test
  extends:
    - .retry
  script:
    - cd build/$BUILD_TYPE
    - ctest --output-on-failure # -j2
  after_script:
    - cd build/$BUILD_TYPE/test
    - xml_grep --pretty_print indented --wrap '' --descr '' --cond "testsuites" *.xml > ../../../junit.xml
    - sed -i ':begin;$!N;s/<\/testsuites>\n<testsuites>//;tbegin;P;D' ../../../junit.xml
  artifacts:
    when: always
    reports:
      junit: junit.xml
    expire_in: 2h

run-tests:clang:
  extends:
    - .linux
    - .run-tests
    - .release
  needs: ["tests:clang"]

run-tests:gcc:
  extends:
    - .linux
    - .run-tests
    - .release
  needs: ["tests:gcc"]

run-tests:gcc:debug:
  extends:
    - .linux
    - .run-tests
    - .debug
  needs: ["tests:gcc:debug"]
  artifacts:
    untracked: true # For the coverage report
    expire_in: 2h
  only:
    - master

run-tests:win:
  stage: test
  extends:
    - .windows
    - .retry
  needs: ["tests:win"]
  script:
    - cd build/Release/test
    - ctest --output-on-failure

run-tests:raspberry:clang:
  extends:
    - .raspberry
    - .run-tests
    - .release
  needs: ["tests:raspberry:clang"]

run-tests:raspberry:gcc:
  extends:
    - .raspberry
    - .run-tests
    - .release
  needs: ["tests:raspberry:gcc"]

# ╔══════════════════════════════════════════════════════════════════════════════════════════════════╗
# ║                                             Analyze                                              ║
# ╚══════════════════════════════════════════════════════════════════════════════════════════════════╝

doxygen:
  stage: analyze
  extends:
    - .linux
  needs: ["check-image"]
  script:
    - cmake -Bbuild/Release -S. -DCMAKE_BUILD_TYPE=Release -DENABLE_MAIN=OFF -DENABLE_TESTING=OFF -DENABLE_DOXYGEN=ON -DWARNINGS_AS_ERRORS=OFF -DENABLE_CPPCHECK=OFF -DENABLE_CLANG_TIDY=OFF -DENABLE_INCLUDE_WHAT_YOU_USE=OFF
    - cmake --build build/Release --target doc
  artifacts:
    paths:
      - bin/doc/html/
    expire_in: 2h
  only:
    - master

coverage:
  stage: analyze
  extends: .linux
  needs: ["run-tests:gcc:debug"]
  script:
    - mkdir -p coverage
    - lcov --gcov-tool gcov --capture --no-external --directory . --output-file coverage/coverage_all.info
    - lcov --remove coverage/coverage_all.info $(pwd)'/lib/*' $(pwd)'/test/*' $(pwd)'/build/*' --output-file coverage/coverage.info
    - genhtml coverage/coverage.info --output-directory coverage --config-file doc/coverage/lcovrc
    - lcov --list coverage/coverage.info
    - python3 tools/lcov_cobertura.py coverage/coverage.info --output bin/cobertura-coverage.xml
    - rm -f coverage/coverage_all.info coverage/coverage.info
  coverage: '/Total:\| ?(\d+\.?\d+\%)/'
  artifacts:
    paths:
      - coverage
      - bin/cobertura-coverage.xml
    expire_in: 2h
  only:
    - master

# ╔══════════════════════════════════════════════════════════════════════════════════════════════════╗
# ║                                              Deploy                                              ║
# ╚══════════════════════════════════════════════════════════════════════════════════════════════════╝

pages:
  # extends: .schedule
  stage: deploy
  extends: .linux
  needs: ["doxygen", "coverage"]
  script:
    - mv bin/doc/html/ public/
    - mv coverage/ public/coverage/
  artifacts:
    name: "Documentation & Coverage Report"
    paths:
      - public
    expire_in: 2h
    reports:
      coverage_report:
        coverage_format: cobertura
        path: bin/cobertura-coverage.xml
  only:
    - master
  # except:
  #   - /^(?!master).+@/

# ╔══════════════════════════════════════════════════════════════════════════════════════════════════╗
# ║                                           Ubuntu 22.04                                           ║
# ╚══════════════════════════════════════════════════════════════════════════════════════════════════╝

.build:ubuntu:22.04:
  stage: build
  extends:
    - .linux
    - .schedule
    - .retry
  image: ubuntu:22.04
  needs: []
  variables:
    DEBIAN_FRONTEND: noninteractive
    TZ: Europe/Berlin
  before_script:
    - apt update
    - apt upgrade -y
    - apt install -y build-essential clang clang-tidy cmake python3-pip ccache cppcheck libglfw3-dev libglfw3
    - pip3 install conan
    - g++ --version
    - clang++ --version
    - clang-tidy --version
    - cmake --version
    - conan --version
    - cppcheck --version
  script:
    - cmake -Bbuild/$BUILD_TYPE -S. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DENABLE_MAIN=ON -DENABLE_TESTING=ON -DCATCH2_JUNIT_OUTPUT=ON -DENABLE_DOXYGEN=OFF -DLOG_LEVEL=TRACE -DWARNINGS_AS_ERRORS=ON -DENABLE_CPPCHECK=OFF -DENABLE_CLANG_TIDY=ON -DENABLE_INCLUDE_WHAT_YOU_USE=OFF
    - cmake --build build/$BUILD_TYPE -- -j2
  artifacts:
    paths:
      - build/$BUILD_TYPE/CTestTestfile.cmake
      - build/$BUILD_TYPE/test/CTestTestfile.cmake
      - build/$BUILD_TYPE/test/tests_*.cmake
      - bin/$BUILD_TYPE/tests
    expire_in: 2h

ubuntu:22.04:clang:release:
  extends:
    - .build:ubuntu:22.04
    - .clang
    - .release

ubuntu:22.04:clang:debug:
  extends:
    - .build:ubuntu:22.04
    - .clang
    - .debug

ubuntu:22.04:gcc:release:
  extends:
    - .build:ubuntu:22.04
    - .gcc
    - .release

ubuntu:22.04:gcc:debug:
  extends:
    - .build:ubuntu:22.04
    - .gcc
    - .debug

.run-tests:ubuntu:22.04:
  stage: test
  extends:
    - .linux
    - .schedule
    - .retry
  image: ubuntu:22.04
  variables:
    DEBIAN_FRONTEND: noninteractive
    TZ: Europe/Berlin
  before_script:
    - apt update
    - apt install -y cmake libglfw3
    - cmake --version
  script:
    - cd build/$BUILD_TYPE/test
    - ctest --output-on-failure # -j2

run-tests:ubuntu:22.04:clang:release:
  needs: ["ubuntu:22.04:clang:release"]
  extends:
    - .run-tests:ubuntu:22.04
    - .release

run-tests:ubuntu:22.04:clang:debug:
  needs: ["ubuntu:22.04:clang:debug"]
  extends:
    - .run-tests:ubuntu:22.04
    - .debug

run-tests:ubuntu:22.04:gcc:release:
  needs: ["ubuntu:22.04:gcc:release"]
  extends:
    - .run-tests:ubuntu:22.04
    - .release

run-tests:ubuntu:22.04:gcc:debug:
  needs: ["ubuntu:22.04:gcc:debug"]
  extends:
    - .run-tests:ubuntu:22.04
    - .debug

# ╔══════════════════════════════════════════════════════════════════════════════════════════════════╗
# ║                                        Arch Linux Latest                                         ║
# ╚══════════════════════════════════════════════════════════════════════════════════════════════════╝

# GitLab CI Fix for:
# error: failed to initialize alpm library
# (could not find or read directory: /var/lib/pacman/)
# https://www.reddit.com/r/archlinux/comments/lek2ba/arch_linux_on_docker_ci_could_not_find_or_read/

.build:archlinux:latest:
  stage: build
  extends:
    - .linux
    - .schedule
    - .retry
  image: archlinux:latest
  needs: []
  before_script:
    - pacman -Sy archlinux-keyring --noconfirm && pacman -Syyu --noconfirm --needed
    - pacman -S --noconfirm --needed base-devel cmake clang ccache cppcheck python-pip glfw-x11
    - pip install conan
    - g++ --version
    - clang++ --version
    - clang-tidy --version
    - cmake --version
    - conan --version
    - cppcheck --version
  script:
    - cmake -Bbuild/$BUILD_TYPE -S. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DENABLE_MAIN=ON -DENABLE_TESTING=ON -DCATCH2_JUNIT_OUTPUT=ON -DENABLE_DOXYGEN=OFF -DLOG_LEVEL=TRACE -DWARNINGS_AS_ERRORS=ON -DENABLE_CPPCHECK=OFF -DENABLE_CLANG_TIDY=ON -DENABLE_INCLUDE_WHAT_YOU_USE=OFF
    - cmake --build build/$BUILD_TYPE -- -j2
  artifacts:
    paths:
      - build/$BUILD_TYPE/CTestTestfile.cmake
      - build/$BUILD_TYPE/test/CTestTestfile.cmake
      - build/$BUILD_TYPE/test/tests_*.cmake
      - bin/$BUILD_TYPE/tests
    expire_in: 2h

archlinux:latest:clang:release:
  extends:
    - .build:archlinux:latest
    - .clang
    - .release

archlinux:latest:clang:debug:
  extends:
    - .build:archlinux:latest
    - .clang
    - .debug

archlinux:latest:gcc:release:
  extends:
    - .build:archlinux:latest
    - .gcc
    - .release

archlinux:latest:gcc:debug:
  extends:
    - .build:archlinux:latest
    - .gcc
    - .debug

.run-tests:archlinux:latest:
  stage: test
  extends:
    - .linux
    - .schedule
    - .retry
  image: archlinux:latest
  before_script:
    - pacman -Sy archlinux-keyring --noconfirm && pacman -Syyu --noconfirm --needed
    - pacman -S --noconfirm --needed base-devel cmake glfw-x11
    - cmake --version
  script:
    - cd build/$BUILD_TYPE/test
    - ctest --output-on-failure # -j2

run-tests:archlinux:latest:clang:release:
  needs: ["archlinux:latest:clang:release"]
  extends:
    - .run-tests:archlinux:latest
    - .release

run-tests:archlinux:latest:clang:debug:
  needs: ["archlinux:latest:clang:debug"]
  extends:
    - .run-tests:archlinux:latest
    - .debug

run-tests:archlinux:latest:gcc:release:
  needs: ["archlinux:latest:gcc:release"]
  extends:
    - .run-tests:archlinux:latest
    - .release

run-tests:archlinux:latest:gcc:debug:
  needs: ["archlinux:latest:gcc:debug"]
  extends:
    - .run-tests:archlinux:latest
    - .debug
