{
    "version": "2.0.0",
    "tasks": [
        // ╔══════════════════════════════════════════════════════════════════════════════════════════╗
        // ║                                       CLEAN Tasks                                        ║
        // ╚══════════════════════════════════════════════════════════════════════════════════════════╝
        { // CLEAN: Remove Build Files
            "label": "CLEAN: Remove Build Files",
            "type": "shell",
            "group": "build",
            "command": "rm",
            "args": [
                "-rf",
                "build",
            ],
            "windows": {
                "command": "Remove-Item",
                "args": [
                    "-Recurse",
                    "-Force",
                    "build",
                ]
            },
            "presentation": {
                "reveal": "silent",
                "clear": true,
                "showReuseMessage": false,
            },
            "problemMatcher": [],
        },
        { // CLEAN: Tests
            "label": "CLEAN: Tests",
            "type": "shell",
            "group": "build",
            "command": "rm",
            "args": [
                "-rf",
                "test/logs/[^\\.]*",
            ],
            "windows": {
                "command": "Get-ChildItem",
                "args": [
                    "-Path",
                    "'test/logs'",
                    "-Recurse",
                    "-exclude",
                    ".gitignore",
                    "|",
                    "Select",
                    "-ExpandProperty",
                    "FullName",
                    "|",
                    "sort",
                    "length",
                    "-Descending",
                    "|",
                    "Remove-Item",
                    "-force",
                ]
            },
            "presentation": {
                "reveal": "silent",
                "clear": true,
                "showReuseMessage": false,
            },
            "problemMatcher": [],
        },
        // ╔══════════════════════════════════════════════════════════════════════════════════════════╗
        // ║                                       Conan Tasks                                        ║
        // ╚══════════════════════════════════════════════════════════════════════════════════════════╝
        { // Conan: Detect
            "label": "Conan: Detect",
            "type": "shell",
            "group": "build",
            "command": "bash",
            "args": [
                "-c",
                "export CC=${input:Compiler} && export CXX=$([[ \"${input:Compiler}\" == \"gcc\" ]] && echo g++ || echo clang++) && conan profile detect --force",
            ],
            "windows": {
                "command": "conan",
                "args": [
                    "profile",
                    "detect",
                    "--force",
                ],
                "options": {
                    "env": {
                        "VSLANG": "1033",
                        "chcp": "1252",
                    }
                },
            },
            "presentation": {
                "clear": true,
            },
            "problemMatcher": [],
        },
        { // Conan
            "label": "Conan",
            "type": "shell",
            "group": "build",
            "command": "bash",
            "args": [
                "-c",
                "export CC=${input:Compiler} && export CXX=$([[ \"${input:Compiler}\" == \"gcc\" ]] && echo g++ || echo clang++) && conan install . --build=missing -s build_type=${input:Build-Type} -s compiler.cppstd=17",
            ],
            "windows": {
                "command": "conan",
                "args": [
                    "install",
                    ".",
                    "--build=missing",
                    "-s",
                    "build_type=${input:Build-Type}",
                    "-s",
                    "compiler.cppstd=17",
                ],
                "options": {
                    "env": {
                        "VSLANG": "1033",
                        "chcp": "1252",
                    }
                },
            },
            "dependsOn": [
                "Conan: Detect",
            ],
            "problemMatcher": [],
        },
        { // Conan: Debug
            "label": "Conan: Debug",
            "type": "shell",
            "group": "build",
            "command": "bash",
            "args": [
                "-c",
                "export CC=${input:Compiler} && export CXX=$([[ \"${input:Compiler}\" == \"gcc\" ]] && echo g++ || echo clang++) && conan install . --build=missing -s build_type=Debug -s compiler.cppstd=17",
            ],
            "windows": {
                "command": "conan",
                "args": [
                    "install",
                    ".",
                    "--build=missing",
                    "-s",
                    "build_type=Debug",
                    "-s",
                    "compiler.cppstd=17",
                ],
                "options": {
                    "env": {
                        "VSLANG": "1033",
                        "chcp": "1252",
                    }
                },
            },
            "dependsOn": [
                "Conan: Detect",
            ],
            "problemMatcher": [],
        },
        { // Conan: Release
            "label": "Conan: Release",
            "type": "shell",
            "group": "build",
            "command": "bash",
            "args": [
                "-c",
                "export CC=${input:Compiler} && export CXX=$([[ \"${input:Compiler}\" == \"gcc\" ]] && echo g++ || echo clang++) && conan install . --build=missing -s build_type=Release -s compiler.cppstd=17",
            ],
            "windows": {
                "command": "conan",
                "args": [
                    "install",
                    ".",
                    "--build=missing",
                    "-s",
                    "build_type=Release",
                    "-s",
                    "compiler.cppstd=17",
                ],
                "options": {
                    "env": {
                        "VSLANG": "1033",
                        "chcp": "1252",
                    }
                },
            },
            "dependsOn": [
                "Conan: Detect",
            ],
            "problemMatcher": [],
        },
        // ╔══════════════════════════════════════════════════════════════════════════════════════════╗
        // ║                                       CMAKE Tasks                                        ║
        // ╚══════════════════════════════════════════════════════════════════════════════════════════╝
        { // CMAKE: Main
            "label": "CMAKE: Main",
            "type": "shell",
            "group": "build",
            "command": "bash",
            "args": [
                "-c",
                "export CC=${input:Compiler} && export CXX=$([[ \"${input:Compiler}\" == \"gcc\" ]] && echo g++ || echo clang++) && cmake -Bbuild/${input:Build-Type}-${input:Compiler} -S. -DCMAKE_BUILD_TYPE=${input:Build-Type} -DCMAKE_TOOLCHAIN_FILE=build/${input:Build-Type}/generators/conan_toolchain.cmake -DENABLE_MAIN=ON -DENABLE_TESTING=OFF -DENABLE_DOXYGEN=OFF -DENABLE_CLANG_TIDY=${input:clang-tidy} -DENABLE_CPPCHECK=${input:cppcheck} -DLOG_LEVEL=${input:Log-Level} -DUSE_ALTERNATE_LINKER=${input:Linker}",
            ],
            "windows": {
                "command": "cmake",
                "args": [
                    "-Bbuild/${input:Build-Type}-msvc",
                    "-S.",
                    "-DCMAKE_BUILD_TYPE=${input:Build-Type}",
                    "-DCMAKE_TOOLCHAIN_FILE=${workspaceFolder}/build/generators/conan_toolchain.cmake",
                    "-DENABLE_MAIN=ON",
                    "-DENABLE_TESTING=OFF",
                    "-DENABLE_DOXYGEN=OFF",
                    "-DLOG_LEVEL=${input:Log-Level}",
                    "-DENABLE_CLANG_TIDY=OFF",
                    "-DENABLE_CPPCHECK=OFF",
                    "-DENABLE_INCLUDE_WHAT_YOU_USE=OFF",
                    "-DWARNINGS_AS_ERRORS=OFF",
                ],
                "options": {
                    "env": {
                        "VSLANG": "1033",
                        "chcp": "1252",
                    }
                },
            },
            "dependsOn": [
                "Conan",
            ],
            "problemMatcher": [],
        },
        { // CMAKE: Testing
            "label": "CMAKE: Testing",
            "type": "shell",
            "group": "build",
            "command": "bash",
            "args": [
                "-c",
                "export CC=${input:Compiler} && export CXX=$([[ \"${input:Compiler}\" == \"gcc\" ]] && echo g++ || echo clang++) && cmake -Bbuild/${input:Build-Type}-${input:Compiler} -S. -DCMAKE_BUILD_TYPE=${input:Build-Type} -DCMAKE_TOOLCHAIN_FILE=build/${input:Build-Type}/generators/conan_toolchain.cmake -DENABLE_MAIN=OFF -DENABLE_TESTING=ON -DENABLE_DOXYGEN=OFF -DENABLE_CLANG_TIDY=${input:clang-tidy} -DENABLE_CPPCHECK=${input:cppcheck} -DLOG_LEVEL=${input:Log-Level} -DUSE_ALTERNATE_LINKER=${input:Linker}",
            ],
            "windows": {
                "command": "cmake",
                "args": [
                    "-Bbuild/${input:Build-Type}-msvc",
                    "-S.",
                    "-DCMAKE_BUILD_TYPE=${input:Build-Type}",
                    "-DCMAKE_TOOLCHAIN_FILE=${workspaceFolder}/build/generators/conan_toolchain.cmake",
                    "-DENABLE_MAIN=OFF",
                    "-DENABLE_TESTING=ON",
                    "-DENABLE_DOXYGEN=OFF",
                    "-DLOG_LEVEL=${input:Log-Level}",
                    "-DENABLE_CLANG_TIDY=OFF",
                    "-DENABLE_CPPCHECK=OFF",
                    "-DENABLE_INCLUDE_WHAT_YOU_USE=OFF",
                    "-DWARNINGS_AS_ERRORS=OFF",
                ],
                "options": {
                    "env": {
                        "VSLANG": "1033",
                        "chcp": "1252",
                    }
                },
            },
            "dependsOn": [
                "Conan",
            ],
            "problemMatcher": [],
        },
        { // CMAKE: Coverage
            "label": "CMAKE: Coverage",
            "type": "shell",
            "group": "build",
            "command": "cmake",
            "args": [
                "-Bbuild/Debug-cov",
                "-S.",
                "-DCMAKE_BUILD_TYPE=Debug",
                "-DCMAKE_TOOLCHAIN_FILE=build/Debug/generators/conan_toolchain.cmake",
                "-DENABLE_MAIN=OFF",
                "-DENABLE_TESTING=ON",
                "-DENABLE_DOXYGEN=OFF",
                "-DENABLE_COVERAGE=TRUE",
                "-DLOG_LEVEL=TRACE",
                "-DENABLE_CLANG_TIDY=OFF",
                "-DENABLE_CPPCHECK=OFF",
                "-DENABLE_INCLUDE_WHAT_YOU_USE=OFF",
                "-DUSE_ALTERNATE_LINKER=${input:Linker}",
            ],
            "options": {
                "env": {
                    "CC": "gcc",
                    "CXX": "g++",
                }
            },
            "dependsOn": [
                "Conan: Debug",
            ],
            "problemMatcher": [],
        },
        { // CMAKE: Documentation
            "label": "CMAKE: Documentation",
            "type": "shell",
            "group": "build",
            "command": "bash",
            "args": [
                "-c",
                "export CC=${input:Compiler} && export CXX=$([[ \"${input:Compiler}\" == \"gcc\" ]] && echo g++ || echo clang++) && cmake -Bbuild/Release-doc-${input:Compiler} -S. -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=build/Release/generators/conan_toolchain.cmake -DENABLE_MAIN=OFF -DENABLE_TESTING=OFF -DENABLE_DOXYGEN=ON -DENABLE_CLANG_TIDY=OFF -DENABLE_CPPCHECK=OFF -DLOG_LEVEL=OFF -DENABLE_INCLUDE_WHAT_YOU_USE=OFF -DDOC_CHECK_CODE_DOCUMENTATION=NO -DUSE_ALTERNATE_LINKER=${input:Linker}",
            ],
            "dependsOn": [
                "Conan: Release",
            ],
            "problemMatcher": [],
        },
        { // CMAKE: Documentation Check
            "label": "CMAKE: Documentation Check",
            "type": "shell",
            "group": "build",
            "command": "bash",
            "args": [
                "-c",
                "export CC=${input:Compiler} && export CXX=$([[ \"${input:Compiler}\" == \"gcc\" ]] && echo g++ || echo clang++) && cmake -Bbuild/Release-doc-${input:Compiler} -S. -DCMAKE_BUILD_TYPE=Release -DCMAKE_TOOLCHAIN_FILE=build/Release/generators/conan_toolchain.cmake -DENABLE_MAIN=OFF -DENABLE_TESTING=OFF -DENABLE_DOXYGEN=ON -DENABLE_CLANG_TIDY=OFF -DENABLE_CPPCHECK=OFF -DLOG_LEVEL=OFF -DENABLE_INCLUDE_WHAT_YOU_USE=OFF -DDOC_CHECK_CODE_DOCUMENTATION=YES -DUSE_ALTERNATE_LINKER=${input:Linker}",
            ],
            "dependsOn": [
                "Conan: Release",
            ],
            "problemMatcher": [],
        },
        // ╔══════════════════════════════════════════════════════════════════════════════════════════╗
        // ║                                  CMAKE Configure Tasks                                   ║
        // ╚══════════════════════════════════════════════════════════════════════════════════════════╝
        { // CMAKE: Configure
            "label": "CMAKE: Configure",
            "type": "shell",
            "group": "build",
            "command": "ccmake",
            "args": [
                "-Bbuild/${input:Build-Type}-${input:Compiler}",
                "-S.",
                "-DCMAKE_BUILD_TYPE=${input:Build-Type}",
            ],
            "options": {
                "env": {
                    "CC": "clang",
                    "CXX": "clang++",
                }
            },
            "presentation": {
                "focus": true
            },
            "dependsOn": [
                "CMAKE: Main",
            ],
            "problemMatcher": [],
        },
        // ╔══════════════════════════════════════════════════════════════════════════════════════════╗
        // ║                                        Build Tasks                                       ║
        // ╚══════════════════════════════════════════════════════════════════════════════════════════╝
        { // MAIN: Build project
            "label": "MAIN: Build project",
            "type": "shell",
            "group": "build",
            "command": "bash",
            "linux": {
                "args": [
                    "-c",
                    "cmake --build build/${input:Build-Type}-${input:Compiler} --config ${input:Build-Type} --parallel${input:Jobs}",
                ],
            },
            "osx": {
                "command": "bash",
                "args": [
                    "-c",
                    "cmake --build build/${input:Build-Type}-${input:Compiler} --config ${input:Build-Type} --parallel${input:Jobs}",
                ],
            },
            "windows": {
                "command": "cmake",
                "args": [
                    "--build",
                    "build/${input:Build-Type}-msvc",
                    "--config",
                    "${input:Build-Type}",
                    "--parallel${input:Jobs}",
                ],
                "options": {
                    "env": {
                        "VSLANG": "1033",
                        "chcp": "1252",
                    }
                },
            },
            "dependsOn": [
                "CMAKE: Main",
            ],
            "problemMatcher": [],
        },
        { // TEST: Build project
            "label": "TEST: Build project",
            "type": "shell",
            "group": "build",
            "linux": {
                "command": "bash",
                "args": [
                    "-c",
                    "cmake --build build/${input:Build-Type}-${input:Compiler} --config ${input:Build-Type} --parallel${input:Jobs}",
                ],
            },
            "osx": {
                "command": "bash",
                "args": [
                    "-c",
                    "cmake --build build/${input:Build-Type}-${input:Compiler} --config ${input:Build-Type} --parallel${input:Jobs}",
                ],
            },
            "windows": {
                "command": "cmake",
                "args": [
                    "--build",
                    "build/${input:Build-Type}-msvc",
                    "--config",
                    "${input:Build-Type}",
                    "--parallel${input:Jobs}",
                ],
                "options": {
                    "env": {
                        "VSLANG": "1033",
                        "chcp": "1252",
                    }
                },
            },
            "dependsOn": [
                "CMAKE: Testing",
            ],
            "problemMatcher": [],
        },
        { // COVERAGE: Build Coverage Report
            "label": "COVERAGE: Build Coverage Report",
            "type": "shell",
            "group": "build",
            "linux": {
                "command": "bash",
                "args": [
                    "-c",
                    "cmake --build build/Debug-cov --config ${input:Build-Type} --parallel${input:Jobs}",
                ],
            },
            "osx": {
                "command": "bash",
                "args": [
                    "-c",
                    "cmake --build build/Debug-cov --config ${input:Build-Type} --parallel${input:Jobs}",
                ],
            },
            "dependsOn": [
                "CMAKE: Coverage",
            ],
            "problemMatcher": [],
        },
        { // DOXYGEN: Build Documentation
            "label": "DOXYGEN: Build Documentation",
            "type": "shell",
            "group": "build",
            "command": "cmake",
            "args": [
                "--build",
                "build/Release-doc-${input:Compiler}",
                "--target",
                "doc",
            ],
            "dependsOn": [
                "CMAKE: Documentation",
            ],
            "problemMatcher": [],
        },
        { // DOXYGEN: Check for errors
            "label": "DOXYGEN: Check for errors",
            "type": "shell",
            "group": "test",
            "command": "cmake",
            "args": [
                "--build",
                "build/Release-doc-${input:Compiler}",
                "--target",
                "doc",
            ],
            "dependsOn": [
                "CMAKE: Documentation Check",
            ],
            "problemMatcher": [],
        },
        // ╔══════════════════════════════════════════════════════════════════════════════════════════╗
        // ║                                        Run Tasks                                         ║
        // ╚══════════════════════════════════════════════════════════════════════════════════════════╝
        { // MAIN: Build & run project
            "label": "MAIN: Build & run project",
            "type": "shell",
            "group": {
                "kind": "test",
                "isDefault": true
            },
            "command": "${workspaceFolder}/build/bin/${input:Build-Type}/instinct",
            "args": [
                "--config=config.ini",
                "--load=\"flow/Default.flow\"",
                // "--load=\"test/flow/Nodes/DataProcessor/GNSS/SinglePointPositioning.flow\"",
                // "--sigterm",
                // "--duration=60",
                // "--nogui",
                // "--noinit",
                // "--input-path=data",
                // "--output-path=logs",
                // "--rotate-output",
                // "--implot-config=\"config/implot.json\"",
                "--global-log-level=trace", // trace/debug/info/warning/error/critical/off
                "--console-log-level=trace", // trace/debug/info/warning/error/critical/off
                "--file-log-level=trace", // trace/debug/info/warning/error/critical/off
                // "--flush-log-level=trace", // trace/debug/info/warning/error/critical/off
                // "--log-filter=SinglePointPositioning",
                // ================ To configure tests ================
                // "--flow-path=test/flow",
                // "--input-path=test/data",
                // "--output-path=test/logs",
            ],
            "options": {
                "cwd": "${workspaceFolder}",
            },
            "dependsOn": [
                "MAIN: Build project",
            ],
            "problemMatcher": [],
        },
        { // TEST: Build & run
            "label": "TEST: Build & run",
            "type": "shell",
            "group": {
                "kind": "build",
                "isDefault": true
            },
            "command": "ctest",
            "args": [
                // "-j4",
                "--output-on-failure",
                // "--tests-regex",
                // "'PVAError|PosVelAtt'",
                // "--verbose",
            ],
            "options": {
                "cwd": "${workspaceFolder}/build/${input:Build-Type}-${input:Compiler}",
            },
            "windows": {
                "options": {
                    "cwd": "${workspaceFolder}/build/${input:Build-Type}-msvc",
                },
            },
            "dependsOn": [
                "TEST: Build project",
            ],
            "problemMatcher": [],
        },
        { // TEST: Build & run w/o flow tests
            "label": "TEST: Build & run w/o flow tests",
            "type": "shell",
            "group": "test",
            "command": "ctest",
            "args": [
                "-j4",
                "--output-on-failure",
                "--exclude-regex",
                "'\\[flow\\]'",
                // "--tests-regex",
                // "'ScrollingBuffer'",
                // "--verbose",
            ],
            "options": {
                "cwd": "${workspaceFolder}/build/${input:Build-Type}-${input:Compiler}",
            },
            "dependsOn": [
                "TEST: Build project",
            ],
            "problemMatcher": [],
        },
        { // COVERAGE: Run Coverage Tests
            "label": "COVERAGE: Run Coverage Tests",
            "type": "shell",
            "group": "test",
            "command": "ctest",
            "args": [
                "-j4",
                "--output-on-failure",
                // "--verbose",
            ],
            "options": {
                "cwd": "${workspaceFolder}/build/Debug-cov",
            },
            "dependsOn": [
                "COVERAGE: Build Coverage Report",
            ],
            "problemMatcher": [],
        },
        { // COVERAGE: Run Coverage Tests w/o flow tests
            "label": "COVERAGE: Run Coverage Tests w/o flow tests",
            "type": "shell",
            "group": "test",
            "command": "ctest",
            "args": [
                "-j4",
                "--output-on-failure",
                "--exclude-regex",
                "'\\[flow\\]'"
                // "--verbose",
            ],
            "options": {
                "cwd": "${workspaceFolder}/build/Debug-cov",
            },
            "dependsOn": [
                "COVERAGE: Build Coverage Report",
            ],
            "problemMatcher": [],
        },
        { // COVERAGE: Create
            "label": "COVERAGE: Create",
            "type": "shell",
            "group": "test",
            "command": "bash",
            "args": [
                "-c",
                "mkdir -p build/coverage && gcovr --config doc/coverage/gcovr.cfg",
            ],
            "dependsOn": [
                "COVERAGE: Run Coverage Tests",
            ],
            "problemMatcher": [],
        },
        { // COVERAGE: Create w/o flow tests
            "label": "COVERAGE: Create w/o flow tests",
            "type": "shell",
            "group": "test",
            "command": "bash",
            "args": [
                "-c",
                "mkdir -p build/coverage && gcovr --config doc/coverage/gcovr.cfg",
            ],
            "dependsOn": [
                "COVERAGE: Run Coverage Tests w/o flow tests",
            ],
            "problemMatcher": [],
        },
        { // COVERAGE: Create & Show
            "label": "COVERAGE: Create & Show",
            "type": "shell",
            "group": "build",
            "command": "xdg-open",
            "args": [
                "build/coverage/index.html",
            ],
            "dependsOn": [
                "COVERAGE: Create",
            ],
            "problemMatcher": [],
        },
        { // COVERAGE: Create & Show w/o flow tests
            "label": "COVERAGE: Create & Show w/o flow tests",
            "type": "shell",
            "group": "build",
            "command": "xdg-open",
            "args": [
                "build/coverage/index.html",
            ],
            "dependsOn": [
                "COVERAGE: Create w/o flow tests",
            ],
            "problemMatcher": [],
        },
        { // DOXYGEN: Create & Show
            "label": "DOXYGEN: Create & Show",
            "type": "shell",
            "group": "build",
            "command": "xdg-open",
            "args": [
                "build/doc/html/index.html",
            ],
            "dependsOn": [
                "DOXYGEN: Build Documentation",
            ],
            "problemMatcher": [],
        },
        // ╔══════════════════════════════════════════════════════════════════════════════════════════╗
        // ║                                     Debugging Tasks                                      ║
        // ╚══════════════════════════════════════════════════════════════════════════════════════════╝
        { // Gperftools: Run profiler
            "label": "Gperftools: Run profiler",
            "type": "shell",
            "group": "test",
            "command": "${workspaceFolder}/build/bin/${input:Build-Type}/instinct",
            "args": [
                "--config=config.ini",
                "--load=\"flow/Default.flow\"",
                // "--load=\"test/flow/Nodes/DataProcessor/GNSS/SinglePointPositioning.flow\"",
                // "--sigterm",
                // "--duration=60",
                "--nogui",
                // "--noinit",
                // "--input-path=data",
                // "--output-path=logs",
                // "--rotate-output",
                // "--implot-config=\"config/implot.json\"",
                "--global-log-level=trace", // trace/debug/info/warning/error/critical/off
                "--console-log-level=trace", // trace/debug/info/warning/error/critical/off
                "--file-log-level=trace", // trace/debug/info/warning/error/critical/off
                // "--flush-log-level=trace", // trace/debug/info/warning/error/critical/off
                // "--log-filter=SinglePointPositioning.cpp",
                // ================ To configure tests ================
                // "--flow-path=test/flow",
                // "--input-path=test/data",
                // "--output-path=test/logs",
            ],
            "options": {
                "cwd": "${workspaceFolder}",
            },
            "linux": {
                "options": {
                    "env": {
                        "CPUPROFILE": "build/bin/${input:Build-Type}/instinct.prof",
                        "CPUPROFILE_FREQUENCY": "500", // Default: 100      How many interrupts/second the cpu-profiler samples.
                    }
                }
            },
            "dependsOn": [
                "MAIN: Build project",
            ],
            "problemMatcher": [],
        },
        { // Gperftools: Show profiled output
            "label": "Gperftools: Show profiled output",
            "type": "shell",
            "group": "test",
            "command": "pprof",
            "args": [
                "--gv", // Displays annotated call-graph via 'gv'
                // "--callgrind", // Outputs the call information in callgrind format
                "build/bin/${input:Build-Type}/instinct",
                "build/bin/${input:Build-Type}/instinct.prof",
                // ">", // For --callgrind option
                // "build/bin/${input:Build-Type}/callgrind.out", // For --callgrind option
            ],
            "options": {
                "cwd": "${workspaceFolder}",
            },
            "problemMatcher": [],
        },
        { // VALGRIND: Run profiler
            "label": "VALGRIND: Run profiler",
            "type": "shell",
            "group": "test",
            "command": "bash",
            "args": [
                "-c",
                "valgrind --callgrind-out-file=build/bin/${input:Build-Type}/callgrind.out --tool=callgrind build/bin/${input:Build-Type}/instinct -f config.ini --nogui -l flow/Default.flow && kcachegrind build/bin/${input:Build-Type}/callgrind.out",
            ],
            "options": {
                "cwd": "${workspaceFolder}",
            },
            "dependsOn": [
                "MAIN: Build project",
            ],
            "problemMatcher": [],
        },
        { // VALGRIND: Show profiled output
            "label": "VALGRIND: Show profiled output",
            "type": "shell",
            "group": "test",
            "command": "kcachegrind",
            "args": [
                "build/bin/${input:Build-Type}/callgrind.out",
            ],
            "options": {
                "cwd": "${workspaceFolder}",
            },
            "problemMatcher": [],
        },
        { // VALGRIND: Memory Leak Check
            "label": "VALGRIND: Memory Leak Check",
            "type": "shell",
            "group": "test",
            "command": "valgrind",
            "args": [
                "--leak-check=yes",
                "build/bin/${input:Build-Type}/instinct",
                "-f",
                "config.ini",
                "--nogui",
                "-l",
                "flow/Default.flow",
            ],
            "options": {
                "cwd": "${workspaceFolder}",
            },
            "dependsOn": [
                "MAIN: Build project",
            ],
            "problemMatcher": [],
        }
    ],
    // ╔══════════════════════════════════════════════════════════════════════════════════════════╗
    // ║                                   Status Bar Parameter                                   ║
    // ╚══════════════════════════════════════════════════════════════════════════════════════════╝
    "inputs": [
        { // buildType
            "id": "Build-Type",
            "type": "command",
            "command": "statusBarParam.get.buildType",
            "args": {
                "values": [
                    "Debug",
                    "Release",
                ],
                "initialSelection": "Debug",
            }
        },
        { // compiler
            "id": "Compiler",
            "type": "command",
            "command": "statusBarParam.get.compiler",
            "args": {
                "values": [
                    "clang",
                    "gcc",
                ],
                "initialSelection": "clang",
            }
        },
        { // Jobs
            "id": "Jobs",
            "type": "command",
            "command": "statusBarParam.get.jobs",
            "args": {
                "values": [
                    "1",
                    "4",
                    "6",
                    "8",
                    "12",
                    "18",
                ],
                "initialSelection": "8",
            }
        },
        { // linker
            "id": "Linker",
            "type": "command",
            "command": "statusBarParam.get.linker",
            "args": {
                "values": [
                    "mold",
                    "ld",
                    "gold",
                    "lld",
                    "bfd",
                ],
                "initialSelection": "mold",
            }
        },
        { // clang-tidy
            "id": "clang-tidy",
            "type": "command",
            "command": "statusBarParam.get.clangTidy",
            "args": {
                "values": [
                    "OFF",
                    "ON",
                ],
                "initialSelection": "OFF",
            }
        },
        { // cppcheck
            "id": "cppcheck",
            "type": "command",
            "command": "statusBarParam.get.cppcheck",
            "args": {
                "values": [
                    "OFF",
                    "ON",
                ],
                "initialSelection": "OFF",
            }
        },
        { // logLevel
            "id": "Log-Level",
            "type": "command",
            "command": "statusBarParam.get.logLevel",
            "args": {
                "values": [
                    "DATA",
                    "TRACE",
                    "DEBUG",
                    "INFO",
                    "WARN",
                    "ERROR",
                    "CRITICAL",
                    "OFF",
                ],
                "initialSelection": "TRACE",
            }
        },
    ],
}